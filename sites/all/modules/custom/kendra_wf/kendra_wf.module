<?php

/**
 * @file
 * Provide workflow functionality for Kendra Hub.
 */

/**
 * Called from a views PHP field
 */
function kendra_wf_calc_points_value($nid, &$static) {
  //drupal_set_message($nid);
  $node = node_load($nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Get the total usage (target usage).
  $target_usage = $node_wrapper->field_cont_target_usage->value();
  $total_usage = _kendra_wf_calc_usage_value($target_usage);
  // Usage weight.
  $usage_weight = $node_wrapper->field_cont_usage_weight->value();
  // right type
  $right_type = $node_wrapper->field_cont_t_role->field_t_right_type->tid->value();

  // Calcolate the points.
  $points = $usage_weight * $total_usage;

  // Update the static points.
  if (empty($static[$right_type])) {
    $static[$right_type] = $points;
  }
  else {
    $static[$right_type] = $static[$right_type] + $points;
  }

  return $points;
}


/**
 * Called from a views PHP field
 */
function kendra_wf_calc_points_split($nid, $points, $static) {
  $node = node_load($nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);
  // right type
  $right_type = $node_wrapper->field_cont_t_role->field_t_right_type->tid->value();

  $split = $points / $static[$right_type] * 100;

  return $split;
}


function _kendra_wf_calc_usage_value($usage) {
  $total_usage = 0;
  foreach ($usage as $value) {
    $total_usage += abs($value['to'] - $value['from']);

  }
  return $total_usage;
}

/**
 * Implements hook_rules_action_info().
 */
function kendra_wf_rules_action_info() {

  $actions = array();

  $actions['kendra_wf_load_parent_asset_from_session'] = array(
    'label' => t('Load parent_asset from session'),
    'group' => t('Kendra'),
    'provides' => array(
      'entity_loaded' => array(
        'type' => 'node',
        'label' => t('Loaded entity'),
        'save' => TRUE,
      )),
  );

  $actions['kendra_wf_load_embedded_asset_from_session'] = array(
    'label' => t('Load embedded_asset from session'),
    'group' => t('Kendra'),
    'provides' => array(
      'entity_loaded' => array(
        'type' => 'node',
        'label' => t('Loaded entity'),
        'save' => TRUE,
      )),
  );

  $actions['kendra_wf_load_embedded_contribution_from_session'] = array(
    'label' => t('Load embedded_contribution from session'),
    'group' => t('Kendra'),
    'provides' => array(
      'entity_loaded' => array(
        'type' => 'node',
        'label' => t('Loaded entities'),
        'save' => TRUE,
      )),
  );
  $actions['kendra_wf_load_related_contribution_records'] = array(
    'label' => t('Load related contribution records'),
    'group' => t('Kendra'),
    'parameter' => array(
      'contribution' => array(
        'type' => 'node',
        'label' => t('Contribution'),
        'save' => TRUE,
      )),
    'provides' => array(
      'loaded_contributions' => array(
        'type' => 'list<node>',
        'label' => t('Loaded Contribution'),
        'save' => TRUE,
      )),
  );

  return $actions;

}

function kendra_wf_load_parent_asset_from_session() {
  // Get from session.
  $nid = $_SESSION['parent_asset'];
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  return array('entity_loaded' => $wrapper);
}

function kendra_wf_load_embedded_asset_from_session() {
  // Get from session.
  $nid = $_SESSION['embedded_asset'];
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  return array('entity_loaded' => $wrapper);
}

function kendra_wf_load_embedded_contribution_from_session() {
  // Get from session.
  $nid = $_SESSION['embedded_contribution'];
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  return array('entity_loaded' => $wrapper);
}

function kendra_wf_load_related_contribution_records($contribution) {

  $contributions = kendra_e_get_related_contribution_records($contribution);

  return array('loaded_contributions' => $contributions);
}


/**
 * Implements hook_FORMID_alter().
 *
 * Form alter to add a smaple submit button.
 */
function kendra_wf_form_views_exposed_form_alter(&$form, &$form_state) {

  if (($form_state['view']->name == 'asset_contributions') && ($form_state['view']->current_display == 'sample_asset') ) {

    // Make sure we have a target sample selected
    if (!isset($_SESSION['sample_target_nid'])) {
      drupal_set_message('You have no target sample selected');
      return;
    }

    $form['sample'] = array(
       '#type' => 'submit',
       '#value' => t('Sample'),
       '#submit' => array('kendra_wf_sample_asset_form_submit'),
     );
  }
  return;
}



function kendra_wf_sample_asset_form_submit($form, &$form_state) {
  if (!isset($_SESSION['sample_target_nid'])) {
    drupal_set_message('You have no target sample selected');
    return;
  }
  //drupal_set_message(' $form_state = ' . print_r($form_state, TRUE));
  $used_end = $form_state['values']['field_cont_target_usage_from'];
  $used_start = $form_state['values']['field_cont_target_usage_to'];
  $source_nid = arg(1);
  $target_nid = $_SESSION['sample_target_nid'];
  unset($_SESSION['sample_target_nid']);

  $source_node = node_load($source_nid);
  $target_node = node_load($target_nid);

  //$form_state['values']
  // Get the list of rights used by the sampled asset.
  $rt_list = kendra_e_get_asset_right_types($source_nid);
  // Cycle the rights.
  foreach ($rt_list as $value) {
    $tid =  kendra_e_get_right_type_role($value['tid'], 'Sample');
    if (!empty($tid)) {
      $role = taxonomy_term_load($tid);
      rules_invoke_component('rules_create_an_embaded_sample_contribution', $source_node, $target_node, $role, $used_start, $used_end);
      //drupal_set_message('$tid= ' . $tid);
    }
  }
  $new_contributions = kendra_e_get_contribution_nodes($source_node, $target_node);
  $new_contribution = array_shift($new_contributions);

  // Send user to the first contribution edit and after he saves a rule will
  // trigger a copy of the usage to all the other contributions.
  drupal_goto('node/' . $new_contribution->nid . '/edit',  array('query' => array('destination' => 'node/' . $target_nid)));
  //drupal_goto('node/' . $target_nid);
}

/**
 * Implements hook_block_info().
 */
function kendra_wf_block_info() {
  $blocks = array();
  $blocks['aggregated_rights_table'] = array(
    'info' => t('Aggregated Rights Table'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function kendra_wf_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'aggregated_rights_table':
      $block['content'] = kendra_wf_get_current_aggregated_rights_table();
      break;
  }
  return $block;
}


function kendra_wf_get_current_aggregated_rights_table() {
  $content = '';
  $nid = arg(1);
  $asset = node_load($nid);
  if ($asset->type == 'asset') {
    $resolved_asset = kendra_e_resolve_asset($asset);

    $content .= '<h2>Aggregated Rights Report</h2>';

    $content .= '<h3>Rights Split</h3>';
    $content .= '<table class="views-table cols-2">';
    $content .= '  <thead>';
    $content .= '    <tr>';
    $content .= '       <th>Right Type</th>';
    $content .= '       <th>Split</th>';
    $content .= '    </tr> ';
    $content .= '  </thead>';

    $content .= '  <tbody>';
    $content .= '    <tr>';
    $content .= '       <td>Composition</td>';
    $content .= '       <td>40%</td>';
    $content .= '    </tr>    ';
    $content .= '    <tr>';
    $content .= '       <td>Performance</td>';
    $content .= '       <td>60%</td>';
    $content .= '    </tr>    ';
    $content .= '  </tbody>';
    $content .= '</table>';



    $content .= '<h3>Legal Entities Split</h3>';
    // Print table headings.
    $content .= '<table class="aggregated-rights-table cols-3">';
    $content .= '  <thead>';

    $content .= '    <tr>';
    $content .= '       <th>Legal Entity</th>';
    $content .= '       <th>Contributions</th>';
    $content .= '       <th>Percent</th>';
    $content .= '    </tr>    ';
    $content .= '  </thead>';
    $content .= '  <tbody>';

    //return print_r($resolved_asset, TRUE);
    //drupal_set_message(print_r($resolved_asset, TRUE));
    foreach ($resolved_asset['legal_entity'] as $key => $legal_entity) {
      $content .= '      <tr class="odd views-row-first">';
      $content .= '              <td class="">' . $key . '</td>';
      $roles = '';
      foreach ($legal_entity['roles'] as $role => $value) {
        $roles .= $role . ' , ';
      }
      $roles = substr($roles, 0, -2);
      $content .= '              <td class="">' . $roles . '</td>';
      $content .= '              <td class=""> X %</td>';
      $content .= '     </tr>';
    }


    $content .= '  </tbody>';
    $content .= '</table>';
  }
  return $content;
}