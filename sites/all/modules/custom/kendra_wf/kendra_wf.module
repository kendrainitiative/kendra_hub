<?php

/**
 * @file
 * Provide workflow functionality for Kendra Hub.
 */

/**
 * Called from a views PHP field
 */
function kendra_wf_calc_points_value($nid, &$static, $start_p=0, $end_p=100) {
  //drupal_set_message($nid);
  $node = node_load($nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);

  // Get the total usage (target usage).
  $target_usage = $node_wrapper->field_cont_target_usage->value();

  // Reduce start and end points so they are within the provided once.
  foreach ($target_usage as &$value) {
    if ($value['from'] < $start_p) {
      $value['from'] = $start_p;
    }
    if ($value['to'] > $end_p) {
      $value['to'] = $end_p;
    }
  }

  $total_usage = _kendra_wf_calc_usage_value($target_usage);
  // Usage weight.
  $usage_weight = $node_wrapper->field_cont_usage_weight->value();
  // right type
  $right_type = $node_wrapper->field_cont_t_role->field_t_right_type->tid->value();

  // Calcolate the points.
  $points = $usage_weight * $total_usage;

  // Update the static points.
  if (empty($static[$right_type])) {
    $static[$right_type] = $points;
  }
  else {
    $static[$right_type] = $static[$right_type] + $points;
  }

  return $points;
}


/**
 * Called from a views PHP field
 */
function kendra_wf_calc_points_split($nid, $points, $static) {
  $node = node_load($nid);
  $node_wrapper = entity_metadata_wrapper('node', $node);
  // right type
  $right_type = $node_wrapper->field_cont_t_role->field_t_right_type->tid->value();

  $split = $points / $static[$right_type] * 100;

  return $split;
}


function _kendra_wf_calc_usage_value($usage) {
  $total_usage = 0;
  foreach ($usage as $value) {
    $total_usage += abs($value['to'] - $value['from']);

  }
  return $total_usage;
}

/**
 * Implements hook_rules_action_info().
 */
function kendra_wf_rules_action_info() {

  $actions = array();

  $actions['kendra_wf_load_parent_asset_from_session'] = array(
    'label' => t('Load parent_asset from session'),
    'group' => t('Kendra'),
    'provides' => array(
      'entity_loaded' => array(
        'type' => 'node',
        'label' => t('Loaded entity'),
        'save' => TRUE,
      )),
  );

  $actions['kendra_wf_load_embedded_asset_from_session'] = array(
    'label' => t('Load embedded_asset from session'),
    'group' => t('Kendra'),
    'provides' => array(
      'entity_loaded' => array(
        'type' => 'node',
        'label' => t('Loaded entity'),
        'save' => TRUE,
      )),
  );

  $actions['kendra_wf_load_embedded_contribution_from_session'] = array(
    'label' => t('Load embedded_contribution from session'),
    'group' => t('Kendra'),
    'provides' => array(
      'entity_loaded' => array(
        'type' => 'node',
        'label' => t('Loaded entities'),
        'save' => TRUE,
      )),
  );
  $actions['kendra_wf_load_related_contribution_records'] = array(
    'label' => t('Load related contribution records'),
    'group' => t('Kendra'),
    'parameter' => array(
      'contribution' => array(
        'type' => 'node',
        'label' => t('Contribution'),
        'save' => TRUE,
      )),
    'provides' => array(
      'loaded_contributions' => array(
        'type' => 'list<node>',
        'label' => t('Loaded Contribution'),
        'save' => TRUE,
      )),
  );

  return $actions;

}

function kendra_wf_load_parent_asset_from_session() {
  // Get from session.
  $nid = $_SESSION['parent_asset'];
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  return array('entity_loaded' => $wrapper);
}

function kendra_wf_load_embedded_asset_from_session() {
  // Get from session.
  $nid = $_SESSION['embedded_asset'];
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  return array('entity_loaded' => $wrapper);
}

function kendra_wf_load_embedded_contribution_from_session() {
  // Get from session.
  $nid = $_SESSION['embedded_contribution'];
  $node = node_load($nid);
  $wrapper = entity_metadata_wrapper('node', $node);
  return array('entity_loaded' => $wrapper);
}

function kendra_wf_load_related_contribution_records($contribution) {

  $contributions = kendra_e_get_related_contribution_records($contribution);

  return array('loaded_contributions' => $contributions);
}


/**
 * Implements hook_FORMID_alter().
 *
 * Form alter to add a smaple submit button.
 */
function kendra_wf_form_views_exposed_form_alter(&$form, &$form_state) {

  if (($form_state['view']->name == 'asset_contributions') && ($form_state['view']->current_display == 'sample_asset') ) {

    // Make sure we have a target sample selected
    if (!isset($_SESSION['sample_target_nid'])) {
      drupal_set_message('You have no target sample selected');
      return;
    }
    $form['sample_grp'] = array(
      '#type' => 'fieldset',
    );
    $form['sample_grp']['sample'] = array(
       '#type' => 'submit',
       '#value' => t('Sample'),
       '#submit' => array('kendra_wf_sample_asset_form_submit'),
     );
  }
  return;
}



function kendra_wf_sample_asset_form_submit($form, &$form_state) {
  if (!isset($_SESSION['sample_target_nid'])) {
    drupal_set_message('You have no target sample selected');
    return;
  }
  //drupal_set_message(' $form_state = ' . print_r($form_state, TRUE));
  $used_end = $form_state['values']['field_cont_target_usage_from'];
  $used_start = $form_state['values']['field_cont_target_usage_to'];
  $source_nid = arg(1);
  $target_nid = $_SESSION['sample_target_nid'];
  unset($_SESSION['sample_target_nid']);

  $source_node = node_load($source_nid);
  $target_node = node_load($target_nid);

  //$form_state['values']
  // Get the list of rights used by the sampled asset.
  $rt_list = kendra_e_get_asset_right_types($source_nid);
  // Cycle the rights.
  foreach ($rt_list as $value) {
    $tid =  kendra_e_get_right_type_role($value['tid'], 'Sample');
    if (!empty($tid)) {
      $role = taxonomy_term_load($tid);
      rules_invoke_component('rules_create_an_embaded_sample_contribution', $source_node, $target_node, $role, $used_start, $used_end);
      //drupal_set_message('$tid= ' . $tid);
    }
  }
  $new_contributions = kendra_e_get_contribution_nodes($source_node, $target_node);
  $new_contribution = array_shift($new_contributions);

  // Send user to the first contribution edit and after he saves a rule will
  // trigger a copy of the usage to all the other contributions.
  drupal_goto('node/' . $new_contribution->nid . '/edit',  array('query' => array('destination' => 'node/' . $target_nid)));
  //drupal_goto('node/' . $target_nid);
}

/**
 * Implements hook_block_info().
 */
function kendra_wf_block_info() {
  $blocks = array();
  $blocks['aggregated_rights_table'] = array(
    'info' => t('Aggregated Rights Table'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function kendra_wf_block_view($delta) {
  $block = array();

  switch ($delta) {
    case 'aggregated_rights_table':
      //$block['content'] = kendra_wf_get_current_aggregated_rights_table();
      $block['content'] = drupal_get_form('kendra_wf_get_current_aggregated_rights_table');
      break;
  }
  return $block;
}


function kendra_wf_get_current_aggregated_rights_table($form, &$form_state) {
  $content = array();
  $nid = arg(1);
  $asset = node_load($nid);
  if ($asset->type == 'asset') {

    $qp = drupal_get_query_parameters();

    if (isset($qp['range'])) {
      // If we have a range in the url use it
      $range = array (
        'start' => $qp['range']['value'],
        'end' => $qp['range']['value2'],
      );
      // Remove the range used on the sample page.
      unset($qp['range']);
    }
    else {
      // Set the range to the complete asset.
      $range = array (
        'start' => 0,
        'end' => 100,
      );
    }

    if (empty($qp)) {
      // Default.
      $rt_split = array (
          'Composition' => 40,
          'Performance' => 50,
          'Recording' => 10,
      );
    }
    else {
      $rt_split = array();
      foreach ($qp as $key => $value) {
        $rt_split[check_plain($key)] = check_plain($value);
      }
      //check_plain();
    }

    // Build the chart for the requested rights split chart.
    $right_type_chart = Array (
      'id' => 'rights-split-requested' . $nid,
      'title' => t('Requested Rights split'),
      'rights' => array(),
    );
    foreach ($rt_split as $key => $value) {
      $right_type_chart['rights'][] = array($key, $value);
    }
    $requested_rights_chart = theme('rights_split', $right_type_chart);


    // Resolve the rights for the asset.
    // This will return an array with the rights information and if needed will
    // Adjust the $rt_split.
    $resolved_asset_rights = kendra_e_resolve_asset_rights($asset, $range['start'], $range['end'], $rt_split);
    //print_r($resolved_asset_rights);


    // Actual Rights split Chart (if not adjusted will be the same as requested).
    $right_type_chart = Array (
      'id' => 'rights-split-actual' . $nid,
      'title' => t('Actual Rights split'),
      'rights' => array(),
    );
    foreach ($rt_split as $key => $value) {
      $right_type_chart['rights'][] = array($key, $value);
    }
    $actual_rights_chart = theme('rights_split', $right_type_chart);

    // Build the combined rights split Graph & table
    $splits = array();
    $header = array('Artist', 'Contribution', 'Percent');
    $rows = array();
    if (isset($resolved_asset_rights['combined'])) {
      foreach ($resolved_asset_rights['combined'] as $key => $legal_entity) {
        // Graph.
        $splits[] = array(
          $key . ' (' . implode(', ', $legal_entity['roles']) . ')',
          $legal_entity['percentage'],
        );
        // Table.
        $rows[] = array(
            'data' => array($key, implode(', ', $legal_entity['roles']),  $legal_entity['percentage']),
            'class' => array('split-row'),
            );
      }
    }
    // Theme the chart
    $entities_chart = theme('entities_split', array(
      'id' => 'legal-entities-split-' . $nid,
      'title' => t('Legal entities split'),
      'splits' => $splits,
    ));
    // Theme the table
    $entities_table =  theme('table', array('header' => $header,'rows' => $rows, 'attributes' => array('class' => array('combined-rights-table'))));


    // Put it all together.

    // Configuration form.
    $form['config'] = array(
      '#type' => 'fieldset',
      '#title' => t('Configuration'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );

    $form['config']['r_split'] = array(
        '#type' => 'select',
        '#title' => t('Rights split'),
        '#options' => array(
          'Composition=40,Performance=50,Recording=10' => t('UK Radio'),
          'Composition=45,Performance=50,Recording=5' => t('US Radio'),
          'Composition=30,Performance=65,Recording=5' => t('FR TV'),
          'Composition=50,Performance=40,Recording=10' => t('DE TV'),
        ),
        //'#default_value' => $category['selected'],
        '#description' => t('Set rights split.'),
      );
    $form['config']['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Run'),
    );


    // The Title.
    $form['title'] = array(
      '#prefix' => '<div class="rights-report-title">',
      '#markup' => '<h2>Aggregated rights report</h2>',
      '#suffix' => '</div>',
    );
    // The rights split
    $form['rights_split'] = array(
      '#type' => 'fieldset',
      '#title' => t('Rights split'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['rights_split']['requested_rights'] = array(
      '#prefix' => '<div class="col-md-6">',
      'chart' => $requested_rights_chart,
      '#suffix' => '</div>',
    );
    $form['rights_split']['actual_rights'] = array(
      '#prefix' => '<div class="col-md-6">',
      'chart' => $actual_rights_chart,
      '#suffix' => '</div>',
    );
    // Combined Split chart and table.
    $form['all_types'] = array(
      '#type' => 'fieldset',
      '#title' => t('Combined rights types'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    // The chart
    $form['all_types']['entities_chart'] = array(
      '#prefix' => '<div class="col-md-6">',
      'chart' => $entities_chart,
      '#suffix' => '</div>',
    );
    // The table.
    $form['all_types']['entities_table'] = array(
      '#prefix' => '<div class="col-md-6">',
      '#markup' =>  $entities_table,
      '#suffix' => '</div>',
    );
  }



  // Finaly we need to create one chart per ryte type.
  if (isset($resolved_asset_rights['type'])) {
    foreach ($resolved_asset_rights['type'] as $right_type => $contributions) {
      $splits = array();
      $rows = array();
      foreach ($contributions as $key => $legal_entity) {
        // Graph.
        $splits[] = array(
          $key . ' (' . implode(', ', $legal_entity['roles']) . ')',
          $legal_entity['percentage'],
        );
        // Table.
        $rows[] = array(
            'data' => array($key, implode(', ', $legal_entity['roles']),  $legal_entity['percentage']),
            'class' => array('split-row'),
            );

      }
      // Theme the chart
      $entities_chart = theme('entities_split', array(
        'id' => 'legal-entities-split-' .$right_type . '-' . $nid,
        'title' => t('Legal entities split'),
        'splits' => $splits,
      ));
      // Theme the table
      $entities_table =  theme('table', array('header' => $header,'rows' => $rows, 'attributes' => array('class' => array( $right_type . '-rights-table'))));

      // Combined Split chart and table.
      $form[$right_type] = array(
        '#type' => 'fieldset',
        '#title' => t($right_type),
        '#collapsible' => FALSE,
        '#collapsed' => FALSE,
      );
      // The chart
      $form[$right_type]['entities_chart'] = array(
        '#prefix' => '<div class="col-md-6">',
        'chart' => $entities_chart,
        '#suffix' => '</div>',
      );
      // The table.
      $form[$right_type]['entities_table'] = array(
        '#prefix' => '<div class="col-md-6">',
        '#markup' =>  $entities_table,
        '#suffix' => '</div>',
      );
    }
  }


  return $form;
}


/**
 * Implements hook_theme().
 */
function kendra_wf_theme($existing, $type, $theme, $path) {
  return array(
    'rights_split' => array(
      'variables' => array('rights' => array()),
    ),
    'entities_split' => array(
      'variables' => array('splits' => array()),
    ),
    'subclip_usage' => array(
      'template' => 'subclip-usage',
      'path' => $path . '/templates',
      'variables' => array('start' => 0, 'end' => 100, 'nid' => 0),
    ),
  );
}

function theme_rights_split($vars) {
  $chart = array(
    'id' => $vars['id'],
    'type' => 'PieChart',
    'rows' => $vars['rights'],
    'width' => '700',
    'height' => '400',
  );
  return array(
    '#prefix' => '<h3>' . $vars['title'] . '</h3>',
    '#markup' => d3_draw($chart),
  );

  return array(
    '#theme' => 'table',
    '#prefix' => '<h3>' . $vars['title'] . '</h3>',
    '#header' => array(t('Right type'), t('Split')),
    '#rows' => $vars['rights'],
  );
}

function theme_entities_split($vars) {
  $chart = array(
    'id' => $vars['id'],
    'type' => 'PieChart',
    'rows' => $vars['splits'],
    'width' => '700',
    'height' => '400',
  );
  return array(
    '#prefix' => '<h3>' . $vars['title'] . '</h3>',
    '#markup' => d3_draw($chart),
  );
}

function template_preprocess_subclip_usage(&$vars) {
  $vars['edit_url'] = '';
  $vars['subclip_style'] = 'margin: 0 '
    . (100 - intval($vars['end'])) . '% 0 ' . intval($vars['start']) . '%;';
  $vars['subclip'] = node_load($vars['nid']);
}




function kendra_wf_get_current_aggregated_rights_table_submit($form, &$form_state) {
  // If we have a right split we will rebuild the url with the split.
  if (isset($form_state['values']) && isset($form_state['values']['r_split'])) {
      // Get curent path.
      $path = current_path();
      // Get the split items.
      $split = $form_state['values']['r_split'];
      $items = explode(',', $split);
      // Build the query parameters.
      $query = array();
      foreach ($items as $value) {
        $item = explode('=', $value);
         $query[$item[0]]= $item[1];
      }
      // Add the range if sppecified (used by views exposed filter).
      $qp = drupal_get_query_parameters();
      if (isset($qp['range'])) {
        $query['range']= $qp['range'];
      }
      $options = array('query' => $query);
      // Call the page with the new query parameters.
      drupal_goto($path, $options);
  }
}